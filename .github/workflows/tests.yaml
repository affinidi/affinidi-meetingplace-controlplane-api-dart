name: Tests

on:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    environment: test
    
    services:
      redis:
        image: valkey/valkey:latest
        options: >-
          --entrypoint redis-server
        ports:
          - 6379:6379

    
    permissions:
      contents: read
      id-token: write  # Required for OIDC token
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: stable
      
      - name: Create directories and setup secrets
        run: |
          mkdir -p ./secrets
          mkdir -p ./params
          mkdir -p keys
      
      - name: Setup configuration files
        run: |
          cp examples/config/config.example.yml config.yml
          cp .env.ci .env
      
      - name: Generate SSL keys
        run: |
          openssl ecparam -name secp256k1 -genkey -noout -out ./keys/secp256k1.pem
          openssl ecparam -name prime256v1 -genkey -noout -out ./keys/p256.pem
          openssl genpkey -algorithm Ed25519 -out ./keys/ed25519.pem
          openssl pkey -in keys/ed25519.pem -pubout -out ./keys/ed25519-pub.pem
      
      - name: Install dependencies
        run: dart pub get
      
      - name: Run setup script
        run: dart run script/setup.dart
      
      - name: Start server in background
        run: |
          dart run ./bin/server_local.dart > /tmp/server.log 2>&1 &
          echo $! > server.pid
      
      - name: Wait for server to be ready
        run: |
          echo "Waiting for server to start..."
          MAX_ATTEMPTS=30
          ATTEMPT=0
          SERVER_PORT=8080
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            if nc -z localhost ${SERVER_PORT} > /dev/null 2>&1; then
              echo "Server is ready!"
              exit 0
            fi
            
            ATTEMPT=$((ATTEMPT + 1))
            echo "Attempt $ATTEMPT/$MAX_ATTEMPTS - Server not ready yet..."
            sleep 1
          done
          echo "Server failed to start within expected time. Checking logs:"
          cat /tmp/server.log
          exit 1
  
      
      - name: Run tests with coverage
        run: |
          echo "Mediator DID: $MEDIATOR_DID"
          dart test --chain-stack-traces --coverage=.coverage
        env:
          MEDIATOR_DID: ${{ secrets.MEDIATOR_DID || vars.MEDIATOR_DID }}
      
      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: .coverage/